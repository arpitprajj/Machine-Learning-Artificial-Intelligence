# -*- coding: utf-8 -*-
"""fashionmnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gmC3bc5ozU_tWLJ0cGDFekB5ruW8nFLo
"""

import tensorflow as tf
from matplotlib import pyplot as plt
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.fashion_mnist.load_data()

print(x_train.shape)

print(x_train)

print(y_train)

print(y_train[1])

print(x_test.shape)

print(x_train[0])

print(x_train.ndim)

print(y_train[0])

for i in range(0,5):
    plt.figure(figsize=(6,6))
    img = x_train[i]
    plt.imshow(img,cmap="gray")
    print(" the label is : ",y_train[i])
    plt.show()

x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)
input_shape = (28, 28, 1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train=x_train/ 255
x_test=x_test/ 255
print('x_train shape:', x_train.shape)
print('Number of images in x_train', x_train.shape[0])
print('Number of images in x_test', x_test.shape[0])

print(x_train[0])

from keras.models import Sequential
from keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D
model = Sequential()
model.add(Conv2D(28, kernel_size=(3,3), input_shape=input_shape))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation=tf.nn.relu))
model.add(Dropout(0.1))
model.add(Dense(10,activation=tf.nn.softmax))



print(5.0//2)

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
model.fit(x=x_train,y=y_train, epochs=6)

model.evaluate(x_test, y_test)

predictions= model.predict(x_test)
print(predictions)

print(predictions[0])

image_index = 9000
plt.imshow(x_test[image_index].reshape(28, 28),cmap='Greys')
pred = model.predict(x_test[image_index].reshape( 1,28, 28, 1))
print(pred)

p=pred.argmax()
print(p)

D={0:'T-shirt', 1:'Trouser' ,2:'pull over', 3:'Dress' ,4:'Coat' ,5:'Sandals', 6:'Shirt', 7:'Sneaker', 8:'Bag', 9:'ankle boots'}
print("Expected answer: ",D[p])
st1=D[p]
print("actual answer:",D[y_test[image_index]])
st2=D[y_test[image_index]]

if(st1==st2):
  print("matched")
else:
  print("dont match")